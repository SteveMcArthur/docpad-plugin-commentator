// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var Commentator, fs, pathUtil, _ref;
    pathUtil = require('path');
    fs = require('fs');
    return Commentator = (function(_super) {
      __extends(Commentator, _super);

      function Commentator() {
        _ref = Commentator.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Commentator.prototype.name = 'commentator';

      Commentator.prototype.config = {
        collectionName: 'comments',
        relativeDirPath: 'comments',
        postUrl: '/comments',
        extension: '.html.md',
        partial: pathUtil.join('node_modules', 'docpad-plugin-commentator', 'src', 'partials', 'comment.html.eco')
      };

      Commentator.prototype.setConfigPaths = function(pathToPartial) {
        var pathToBase;
        pathToBase = pathToPartial.replace('comment.html.eco', 'commentbase.html.eco');
        return this.setConfig({
          pathToPartial: pathToPartial,
          pathToBase: pathToBase
        });
      };

      Commentator.prototype.setPartialPaths = function() {
        var docpad, pathToPartial, plugin;
        plugin = this;
        docpad = plugin.docpad;
        pathToPartial = pathUtil.join(docpad.config.rootPath, plugin.getConfig().partial);
        if (!fs.existsSync(pathToPartial)) {
          pathToPartial = pathToPartial.replace('node_modules', 'plugins');
          if (!fs.existsSync(pathToPartial)) {
            pathToPartial = pathUtil.join(docpad.config.pluginPaths[0], 'src', 'partials', 'comment.html.eco');
          }
        }
        return plugin.setConfigPaths(pathToPartial);
      };

      Commentator.prototype.extendTemplateData = function(_arg) {
        var docpad, plugin, templateData;
        templateData = _arg.templateData;
        plugin = this;
        docpad = plugin.docpad;
        this.setPartialPaths();
        console.log("EXTEND TEMPLATE DATA");
        templateData.getCommentsBlock = function() {
          var baseComment, blockHtml, eco, obj, pageComments;
          this.referencesOthers();
          console.log("GET COMMENTS BLOCK");
          eco = require('eco');
          blockHtml = fs.readFileSync(plugin.getConfig().pathToPartial, 'utf8');
          baseComment = fs.readFileSync(plugin.getConfig().pathToBase, 'utf8');
          pageComments = docpad.getCollection(plugin.getConfig().collectionName).findAll({
            'postslug': this.document.slug
          }, [
            {
              date: -1
            }
          ]);
          obj = {
            baseComment: baseComment,
            eco: eco,
            allComments: pageComments,
            document: this.document
          };
          blockHtml = eco.render(blockHtml, obj);
          return blockHtml;
        };
        templateData.getComments = function() {
          var slug;
          slug = this.document.slug;
          return docpad.getCollection(plugin.getConfig().collectionName).findAll({
            'postslug': slug
          }, [
            {
              date: -1
            }
          ]);
        };
        return this;
      };

      Commentator.prototype.extendCollections = function() {
        var comments, config, database, docpad;
        config = this.getConfig();
        docpad = this.docpad;
        database = docpad.getDatabase();
        comments = database.findAllLive({
          relativeOutDirPath: 'comments'
        }, [
          {
            date: -1
          }
        ]);
        docpad.setCollection(config.collectionName, comments);
        console.log("GOT COLLECTION");
        return this;
      };

      Commentator.prototype.serverExtend = function(opts) {
        var docpad, server;
        server = opts.server;
        docpad = this.docpad;
        server.post(this.getConfig().postUrl, function(req, res, next) {
          var content, documentAttributes, key, meta, now, nowString, nowTime, outFile, outPath, safefs, val, _ref1;
          now = new Date();
          nowTime = now.getTime();
          nowString = now.toString();
          outPath = pathUtil.join(docpad.config.documentsPaths[0], "comments");
          outFile = pathUtil.join(outPath, nowTime.toString() + ".html.md");
          documentAttributes = {
            data: req.body.content || '',
            meta: {
              postslug: req.body.slug,
              author: req.body.author || '',
              date: nowString,
              timeid: nowTime,
              fullPath: outFile
            }
          };
          if (req.body.responseid) {
            documentAttributes.meta.responseid = req.body.responseid;
          }
          meta = "";
          _ref1 = documentAttributes.meta;
          for (key in _ref1) {
            val = _ref1[key];
            meta += key + ": " + val + "\r\n";
          }
          content = '---\r\n' + meta + '\r\n---\r\n' + documentAttributes.data;
          safefs = require('safefs');
          safefs.writeFile(outFile, content, function(err2) {
            if (err2) {
              return next(err2);
            }
          });
          return res.json(documentAttributes);
        });
        return this;
      };

      return Commentator;

    })(BasePlugin);
  };

}).call(this);
